//
// This is a generated file, do not edit!
// Generated by R.swift, see https://github.com/mac-cain13/R.swift
//

import Foundation
import Rswift
import UIKit

/// This `R` struct is generated and contains references to static resources.
struct R: Rswift.Validatable {
  fileprivate static let applicationLocale = hostingBundle.preferredLocalizations.first.flatMap { Locale(identifier: $0) } ?? Locale.current
  fileprivate static let hostingBundle = Bundle(for: R.Class.self)

  /// Find first language and bundle for which the table exists
  fileprivate static func localeBundle(tableName: String, preferredLanguages: [String]) -> (Foundation.Locale, Foundation.Bundle)? {
    // Filter preferredLanguages to localizations, use first locale
    var languages = preferredLanguages
      .map { Locale(identifier: $0) }
      .prefix(1)
      .flatMap { locale -> [String] in
        if hostingBundle.localizations.contains(locale.identifier) {
          if let language = locale.languageCode, hostingBundle.localizations.contains(language) {
            return [locale.identifier, language]
          } else {
            return [locale.identifier]
          }
        } else if let language = locale.languageCode, hostingBundle.localizations.contains(language) {
          return [language]
        } else {
          return []
        }
      }

    // If there's no languages, use development language as backstop
    if languages.isEmpty {
      if let developmentLocalization = hostingBundle.developmentLocalization {
        languages = [developmentLocalization]
      }
    } else {
      // Insert Base as second item (between locale identifier and languageCode)
      languages.insert("Base", at: 1)

      // Add development language as backstop
      if let developmentLocalization = hostingBundle.developmentLocalization {
        languages.append(developmentLocalization)
      }
    }

    // Find first language for which table exists
    // Note: key might not exist in chosen language (in that case, key will be shown)
    for language in languages {
      if let lproj = hostingBundle.url(forResource: language, withExtension: "lproj"),
         let lbundle = Bundle(url: lproj)
      {
        let strings = lbundle.url(forResource: tableName, withExtension: "strings")
        let stringsdict = lbundle.url(forResource: tableName, withExtension: "stringsdict")

        if strings != nil || stringsdict != nil {
          return (Locale(identifier: language), lbundle)
        }
      }
    }

    // If table is available in main bundle, don't look for localized resources
    let strings = hostingBundle.url(forResource: tableName, withExtension: "strings", subdirectory: nil, localization: nil)
    let stringsdict = hostingBundle.url(forResource: tableName, withExtension: "stringsdict", subdirectory: nil, localization: nil)

    if strings != nil || stringsdict != nil {
      return (applicationLocale, hostingBundle)
    }

    // If table is not found for requested languages, key will be shown
    return nil
  }

  /// Load string from Info.plist file
  fileprivate static func infoPlistString(path: [String], key: String) -> String? {
    var dict = hostingBundle.infoDictionary
    for step in path {
      guard let obj = dict?[step] as? [String: Any] else { return nil }
      dict = obj
    }
    return dict?[key] as? String
  }

  static func validate() throws {
    try font.validate()
    try intern.validate()
  }

  #if os(iOS) || os(tvOS)
  /// This `R.storyboard` struct is generated, and contains static references to 4 storyboards.
  struct storyboard {
    /// Storyboard `HelpCategories`.
    static let helpCategories = _R.storyboard.helpCategories()
    /// Storyboard `LaunchLoading`.
    static let launchLoading = _R.storyboard.launchLoading()
    /// Storyboard `LaunchScreen`.
    static let launchScreen = _R.storyboard.launchScreen()
    /// Storyboard `TabMenu`.
    static let tabMenu = _R.storyboard.tabMenu()

    #if os(iOS) || os(tvOS)
    /// `UIStoryboard(name: "HelpCategories", bundle: ...)`
    static func helpCategories(_: Void = ()) -> UIKit.UIStoryboard {
      return UIKit.UIStoryboard(resource: R.storyboard.helpCategories)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIStoryboard(name: "LaunchLoading", bundle: ...)`
    static func launchLoading(_: Void = ()) -> UIKit.UIStoryboard {
      return UIKit.UIStoryboard(resource: R.storyboard.launchLoading)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIStoryboard(name: "LaunchScreen", bundle: ...)`
    static func launchScreen(_: Void = ()) -> UIKit.UIStoryboard {
      return UIKit.UIStoryboard(resource: R.storyboard.launchScreen)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIStoryboard(name: "TabMenu", bundle: ...)`
    static func tabMenu(_: Void = ()) -> UIKit.UIStoryboard {
      return UIKit.UIStoryboard(resource: R.storyboard.tabMenu)
    }
    #endif

    fileprivate init() {}
  }
  #endif

  /// This `R.color` struct is generated, and contains static references to 17 colors.
  struct color {
    /// Color `AccentColor`.
    static let accentColor = Rswift.ColorResource(bundle: R.hostingBundle, name: "AccentColor")
    /// Color `black20`.
    static let black20 = Rswift.ColorResource(bundle: R.hostingBundle, name: "black20")
    /// Color `blueGrey`.
    static let blueGrey = Rswift.ColorResource(bundle: R.hostingBundle, name: "blueGrey")
    /// Color `charcoalGrey`.
    static let charcoalGrey = Rswift.ColorResource(bundle: R.hostingBundle, name: "charcoalGrey")
    /// Color `coolGreyTwo`.
    static let coolGreyTwo = Rswift.ColorResource(bundle: R.hostingBundle, name: "coolGreyTwo")
    /// Color `coolGrey`.
    static let coolGrey = Rswift.ColorResource(bundle: R.hostingBundle, name: "coolGrey")
    /// Color `darkSlateBlue`.
    static let darkSlateBlue = Rswift.ColorResource(bundle: R.hostingBundle, name: "darkSlateBlue")
    /// Color `eggshell`.
    static let eggshell = Rswift.ColorResource(bundle: R.hostingBundle, name: "eggshell")
    /// Color `grey`.
    static let grey = Rswift.ColorResource(bundle: R.hostingBundle, name: "grey")
    /// Color `leaf`.
    static let leaf = Rswift.ColorResource(bundle: R.hostingBundle, name: "leaf")
    /// Color `lightGrey`.
    static let lightGrey = Rswift.ColorResource(bundle: R.hostingBundle, name: "lightGrey")
    /// Color `lightOliveGreen`.
    static let lightOliveGreen = Rswift.ColorResource(bundle: R.hostingBundle, name: "lightOliveGreen")
    /// Color `melon`.
    static let melon = Rswift.ColorResource(bundle: R.hostingBundle, name: "melon")
    /// Color `paleGrey`.
    static let paleGrey = Rswift.ColorResource(bundle: R.hostingBundle, name: "paleGrey")
    /// Color `warmGrey`.
    static let warmGrey = Rswift.ColorResource(bundle: R.hostingBundle, name: "warmGrey")
    /// Color `whiteTwo`.
    static let whiteTwo = Rswift.ColorResource(bundle: R.hostingBundle, name: "whiteTwo")
    /// Color `white`.
    static let white = Rswift.ColorResource(bundle: R.hostingBundle, name: "white")

    #if os(iOS) || os(tvOS)
    /// `UIColor(named: "AccentColor", bundle: ..., traitCollection: ...)`
    @available(tvOS 11.0, *)
    @available(iOS 11.0, *)
    static func accentColor(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIColor? {
      return UIKit.UIColor(resource: R.color.accentColor, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIColor(named: "black20", bundle: ..., traitCollection: ...)`
    @available(tvOS 11.0, *)
    @available(iOS 11.0, *)
    static func black20(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIColor? {
      return UIKit.UIColor(resource: R.color.black20, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIColor(named: "blueGrey", bundle: ..., traitCollection: ...)`
    @available(tvOS 11.0, *)
    @available(iOS 11.0, *)
    static func blueGrey(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIColor? {
      return UIKit.UIColor(resource: R.color.blueGrey, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIColor(named: "charcoalGrey", bundle: ..., traitCollection: ...)`
    @available(tvOS 11.0, *)
    @available(iOS 11.0, *)
    static func charcoalGrey(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIColor? {
      return UIKit.UIColor(resource: R.color.charcoalGrey, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIColor(named: "coolGrey", bundle: ..., traitCollection: ...)`
    @available(tvOS 11.0, *)
    @available(iOS 11.0, *)
    static func coolGrey(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIColor? {
      return UIKit.UIColor(resource: R.color.coolGrey, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIColor(named: "coolGreyTwo", bundle: ..., traitCollection: ...)`
    @available(tvOS 11.0, *)
    @available(iOS 11.0, *)
    static func coolGreyTwo(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIColor? {
      return UIKit.UIColor(resource: R.color.coolGreyTwo, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIColor(named: "darkSlateBlue", bundle: ..., traitCollection: ...)`
    @available(tvOS 11.0, *)
    @available(iOS 11.0, *)
    static func darkSlateBlue(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIColor? {
      return UIKit.UIColor(resource: R.color.darkSlateBlue, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIColor(named: "eggshell", bundle: ..., traitCollection: ...)`
    @available(tvOS 11.0, *)
    @available(iOS 11.0, *)
    static func eggshell(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIColor? {
      return UIKit.UIColor(resource: R.color.eggshell, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIColor(named: "grey", bundle: ..., traitCollection: ...)`
    @available(tvOS 11.0, *)
    @available(iOS 11.0, *)
    static func grey(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIColor? {
      return UIKit.UIColor(resource: R.color.grey, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIColor(named: "leaf", bundle: ..., traitCollection: ...)`
    @available(tvOS 11.0, *)
    @available(iOS 11.0, *)
    static func leaf(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIColor? {
      return UIKit.UIColor(resource: R.color.leaf, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIColor(named: "lightGrey", bundle: ..., traitCollection: ...)`
    @available(tvOS 11.0, *)
    @available(iOS 11.0, *)
    static func lightGrey(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIColor? {
      return UIKit.UIColor(resource: R.color.lightGrey, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIColor(named: "lightOliveGreen", bundle: ..., traitCollection: ...)`
    @available(tvOS 11.0, *)
    @available(iOS 11.0, *)
    static func lightOliveGreen(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIColor? {
      return UIKit.UIColor(resource: R.color.lightOliveGreen, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIColor(named: "melon", bundle: ..., traitCollection: ...)`
    @available(tvOS 11.0, *)
    @available(iOS 11.0, *)
    static func melon(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIColor? {
      return UIKit.UIColor(resource: R.color.melon, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIColor(named: "paleGrey", bundle: ..., traitCollection: ...)`
    @available(tvOS 11.0, *)
    @available(iOS 11.0, *)
    static func paleGrey(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIColor? {
      return UIKit.UIColor(resource: R.color.paleGrey, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIColor(named: "warmGrey", bundle: ..., traitCollection: ...)`
    @available(tvOS 11.0, *)
    @available(iOS 11.0, *)
    static func warmGrey(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIColor? {
      return UIKit.UIColor(resource: R.color.warmGrey, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIColor(named: "white", bundle: ..., traitCollection: ...)`
    @available(tvOS 11.0, *)
    @available(iOS 11.0, *)
    static func white(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIColor? {
      return UIKit.UIColor(resource: R.color.white, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIColor(named: "whiteTwo", bundle: ..., traitCollection: ...)`
    @available(tvOS 11.0, *)
    @available(iOS 11.0, *)
    static func whiteTwo(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIColor? {
      return UIKit.UIColor(resource: R.color.whiteTwo, compatibleWith: traitCollection)
    }
    #endif

    fileprivate init() {}
  }

  /// This `R.file` struct is generated, and contains static references to 2 files.
  struct file {
    /// Resource file `OfficinaSansExtraBoldSCC.otf`.
    static let officinaSansExtraBoldSCCOtf = Rswift.FileResource(bundle: R.hostingBundle, name: "OfficinaSansExtraBoldSCC", pathExtension: "otf")
    /// Resource file `SFUIText-Regular.otf`.
    static let sfuiTextRegularOtf = Rswift.FileResource(bundle: R.hostingBundle, name: "SFUIText-Regular", pathExtension: "otf")

    /// `bundle.url(forResource: "OfficinaSansExtraBoldSCC", withExtension: "otf")`
    static func officinaSansExtraBoldSCCOtf(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.officinaSansExtraBoldSCCOtf
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "SFUIText-Regular", withExtension: "otf")`
    static func sfuiTextRegularOtf(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.sfuiTextRegularOtf
      return fileResource.bundle.url(forResource: fileResource)
    }

    fileprivate init() {}
  }

  /// This `R.font` struct is generated, and contains static references to 2 fonts.
  struct font: Rswift.Validatable {
    /// Font `OfficinaSansExtraBoldSCC`.
    static let officinaSansExtraBoldSCC = Rswift.FontResource(fontName: "OfficinaSansExtraBoldSCC")
    /// Font `SFUIText-Regular`.
    static let sfuiTextRegular = Rswift.FontResource(fontName: "SFUIText-Regular")

    /// `UIFont(name: "OfficinaSansExtraBoldSCC", size: ...)`
    static func officinaSansExtraBoldSCC(size: CGFloat) -> UIKit.UIFont? {
      return UIKit.UIFont(resource: officinaSansExtraBoldSCC, size: size)
    }

    /// `UIFont(name: "SFUIText-Regular", size: ...)`
    static func sfuiTextRegular(size: CGFloat) -> UIKit.UIFont? {
      return UIKit.UIFont(resource: sfuiTextRegular, size: size)
    }

    static func validate() throws {
      if R.font.officinaSansExtraBoldSCC(size: 42) == nil { throw Rswift.ValidationError(description:"[R.swift] Font 'OfficinaSansExtraBoldSCC' could not be loaded, is 'OfficinaSansExtraBoldSCC.otf' added to the UIAppFonts array in this targets Info.plist?") }
      if R.font.sfuiTextRegular(size: 42) == nil { throw Rswift.ValidationError(description:"[R.swift] Font 'SFUIText-Regular' could not be loaded, is 'SFUIText-Regular.otf' added to the UIAppFonts array in this targets Info.plist?") }
    }

    fileprivate init() {}
  }

  /// This `R.image` struct is generated, and contains static references to 18 images.
  struct image {
    /// Image `HelpAdults`.
    static let helpAdults = Rswift.ImageResource(bundle: R.hostingBundle, name: "HelpAdults")
    /// Image `HelpAnimals`.
    static let helpAnimals = Rswift.ImageResource(bundle: R.hostingBundle, name: "HelpAnimals")
    /// Image `HelpChildren`.
    static let helpChildren = Rswift.ImageResource(bundle: R.hostingBundle, name: "HelpChildren")
    /// Image `HelpElderly`.
    static let helpElderly = Rswift.ImageResource(bundle: R.hostingBundle, name: "HelpElderly")
    /// Image `HelpEvents`.
    static let helpEvents = Rswift.ImageResource(bundle: R.hostingBundle, name: "HelpEvents")
    /// Image `heartIcon`.
    static let heartIcon = Rswift.ImageResource(bundle: R.hostingBundle, name: "heartIcon")
    /// Image `helpTabbarSel`.
    static let helpTabbarSel = Rswift.ImageResource(bundle: R.hostingBundle, name: "helpTabbarSel")
    /// Image `helpTabbar`.
    static let helpTabbar = Rswift.ImageResource(bundle: R.hostingBundle, name: "helpTabbar")
    /// Image `historyTabbarSel`.
    static let historyTabbarSel = Rswift.ImageResource(bundle: R.hostingBundle, name: "historyTabbarSel")
    /// Image `historyTabbar`.
    static let historyTabbar = Rswift.ImageResource(bundle: R.hostingBundle, name: "historyTabbar")
    /// Image `newsTabbarSel`.
    static let newsTabbarSel = Rswift.ImageResource(bundle: R.hostingBundle, name: "newsTabbarSel")
    /// Image `newsTabbar`.
    static let newsTabbar = Rswift.ImageResource(bundle: R.hostingBundle, name: "newsTabbar")
    /// Image `profileTabbarSel`.
    static let profileTabbarSel = Rswift.ImageResource(bundle: R.hostingBundle, name: "profileTabbarSel")
    /// Image `profileTabbar`.
    static let profileTabbar = Rswift.ImageResource(bundle: R.hostingBundle, name: "profileTabbar")
    /// Image `searchTabbarSel`.
    static let searchTabbarSel = Rswift.ImageResource(bundle: R.hostingBundle, name: "searchTabbarSel")
    /// Image `searchTabbar`.
    static let searchTabbar = Rswift.ImageResource(bundle: R.hostingBundle, name: "searchTabbar")
    /// Image `simbirSoftLogo`.
    static let simbirSoftLogo = Rswift.ImageResource(bundle: R.hostingBundle, name: "simbirSoftLogo")
    /// Image `splashLogo`.
    static let splashLogo = Rswift.ImageResource(bundle: R.hostingBundle, name: "splashLogo")

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "HelpAdults", bundle: ..., traitCollection: ...)`
    static func helpAdults(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.helpAdults, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "HelpAnimals", bundle: ..., traitCollection: ...)`
    static func helpAnimals(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.helpAnimals, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "HelpChildren", bundle: ..., traitCollection: ...)`
    static func helpChildren(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.helpChildren, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "HelpElderly", bundle: ..., traitCollection: ...)`
    static func helpElderly(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.helpElderly, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "HelpEvents", bundle: ..., traitCollection: ...)`
    static func helpEvents(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.helpEvents, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "heartIcon", bundle: ..., traitCollection: ...)`
    static func heartIcon(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.heartIcon, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "helpTabbar", bundle: ..., traitCollection: ...)`
    static func helpTabbar(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.helpTabbar, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "helpTabbarSel", bundle: ..., traitCollection: ...)`
    static func helpTabbarSel(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.helpTabbarSel, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "historyTabbar", bundle: ..., traitCollection: ...)`
    static func historyTabbar(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.historyTabbar, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "historyTabbarSel", bundle: ..., traitCollection: ...)`
    static func historyTabbarSel(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.historyTabbarSel, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "newsTabbar", bundle: ..., traitCollection: ...)`
    static func newsTabbar(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.newsTabbar, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "newsTabbarSel", bundle: ..., traitCollection: ...)`
    static func newsTabbarSel(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.newsTabbarSel, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "profileTabbar", bundle: ..., traitCollection: ...)`
    static func profileTabbar(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.profileTabbar, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "profileTabbarSel", bundle: ..., traitCollection: ...)`
    static func profileTabbarSel(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.profileTabbarSel, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "searchTabbar", bundle: ..., traitCollection: ...)`
    static func searchTabbar(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.searchTabbar, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "searchTabbarSel", bundle: ..., traitCollection: ...)`
    static func searchTabbarSel(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.searchTabbarSel, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "simbirSoftLogo", bundle: ..., traitCollection: ...)`
    static func simbirSoftLogo(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.simbirSoftLogo, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "splashLogo", bundle: ..., traitCollection: ...)`
    static func splashLogo(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.splashLogo, compatibleWith: traitCollection)
    }
    #endif

    fileprivate init() {}
  }

  /// This `R.info` struct is generated, and contains static references to 1 properties.
  struct info {
    struct uiApplicationSceneManifest {
      static let _key = "UIApplicationSceneManifest"
      static let uiApplicationSupportsMultipleScenes = false

      struct uiSceneConfigurations {
        static let _key = "UISceneConfigurations"

        struct uiWindowSceneSessionRoleApplication {
          struct defaultConfiguration {
            static let _key = "Default Configuration"
            static let uiSceneConfigurationName = infoPlistString(path: ["UIApplicationSceneManifest", "UISceneConfigurations", "UIWindowSceneSessionRoleApplication", "Default Configuration"], key: "UISceneConfigurationName") ?? "Default Configuration"
            static let uiSceneDelegateClassName = infoPlistString(path: ["UIApplicationSceneManifest", "UISceneConfigurations", "UIWindowSceneSessionRoleApplication", "Default Configuration"], key: "UISceneDelegateClassName") ?? "$(PRODUCT_MODULE_NAME).SceneDelegate"
            static let uiSceneStoryboardFile = infoPlistString(path: ["UIApplicationSceneManifest", "UISceneConfigurations", "UIWindowSceneSessionRoleApplication", "Default Configuration"], key: "UISceneStoryboardFile") ?? "LaunchLoading"

            fileprivate init() {}
          }

          fileprivate init() {}
        }

        fileprivate init() {}
      }

      fileprivate init() {}
    }

    fileprivate init() {}
  }

  /// This `R.reuseIdentifier` struct is generated, and contains static references to 1 reuse identifiers.
  struct reuseIdentifier {
    /// Reuse identifier `helpCategoryCell`.
    static let helpCategoryCell: Rswift.ReuseIdentifier<HelpCategoryCell> = Rswift.ReuseIdentifier(identifier: "helpCategoryCell")

    fileprivate init() {}
  }

  fileprivate struct intern: Rswift.Validatable {
    fileprivate static func validate() throws {
      try _R.validate()
    }

    fileprivate init() {}
  }

  fileprivate class Class {}

  fileprivate init() {}
}

struct _R: Rswift.Validatable {
  static func validate() throws {
    #if os(iOS) || os(tvOS)
    try storyboard.validate()
    #endif
  }

  #if os(iOS) || os(tvOS)
  struct storyboard: Rswift.Validatable {
    static func validate() throws {
      #if os(iOS) || os(tvOS)
      try helpCategories.validate()
      #endif
      #if os(iOS) || os(tvOS)
      try launchLoading.validate()
      #endif
      #if os(iOS) || os(tvOS)
      try launchScreen.validate()
      #endif
      #if os(iOS) || os(tvOS)
      try tabMenu.validate()
      #endif
    }

    #if os(iOS) || os(tvOS)
    struct helpCategories: Rswift.StoryboardResourceWithInitialControllerType, Rswift.Validatable {
      typealias InitialController = UIKit.UINavigationController

      let bundle = R.hostingBundle
      let name = "HelpCategories"

      static func validate() throws {
        if #available(iOS 11.0, tvOS 11.0, *) {
          if UIKit.UIColor(named: "charcoalGrey", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Color named 'charcoalGrey' is used in storyboard 'HelpCategories', but couldn't be loaded.") }
          if UIKit.UIColor(named: "eggshell", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Color named 'eggshell' is used in storyboard 'HelpCategories', but couldn't be loaded.") }
          if UIKit.UIColor(named: "lightOliveGreen", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Color named 'lightOliveGreen' is used in storyboard 'HelpCategories', but couldn't be loaded.") }
        }
      }

      fileprivate init() {}
    }
    #endif

    #if os(iOS) || os(tvOS)
    struct launchLoading: Rswift.StoryboardResourceWithInitialControllerType, Rswift.Validatable {
      typealias InitialController = LaunchLoadingViewController

      let bundle = R.hostingBundle
      let name = "LaunchLoading"

      static func validate() throws {
        if UIKit.UIImage(named: "simbirSoftLogo", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'simbirSoftLogo' is used in storyboard 'LaunchLoading', but couldn't be loaded.") }
        if UIKit.UIImage(named: "splashLogo", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'splashLogo' is used in storyboard 'LaunchLoading', but couldn't be loaded.") }
        if #available(iOS 11.0, tvOS 11.0, *) {
          if UIKit.UIColor(named: "charcoalGrey", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Color named 'charcoalGrey' is used in storyboard 'LaunchLoading', but couldn't be loaded.") }
          if UIKit.UIColor(named: "paleGrey", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Color named 'paleGrey' is used in storyboard 'LaunchLoading', but couldn't be loaded.") }
        }
      }

      fileprivate init() {}
    }
    #endif

    #if os(iOS) || os(tvOS)
    struct launchScreen: Rswift.StoryboardResourceWithInitialControllerType, Rswift.Validatable {
      typealias InitialController = UIKit.UIViewController

      let bundle = R.hostingBundle
      let name = "LaunchScreen"

      static func validate() throws {
        if UIKit.UIImage(named: "simbirSoftLogo", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'simbirSoftLogo' is used in storyboard 'LaunchScreen', but couldn't be loaded.") }
        if UIKit.UIImage(named: "splashLogo", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'splashLogo' is used in storyboard 'LaunchScreen', but couldn't be loaded.") }
        if #available(iOS 11.0, tvOS 11.0, *) {
          if UIKit.UIColor(named: "paleGrey", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Color named 'paleGrey' is used in storyboard 'LaunchScreen', but couldn't be loaded.") }
        }
      }

      fileprivate init() {}
    }
    #endif

    #if os(iOS) || os(tvOS)
    struct tabMenu: Rswift.StoryboardResourceWithInitialControllerType, Rswift.Validatable {
      typealias InitialController = TabMenuViewController

      let bundle = R.hostingBundle
      let name = "TabMenu"

      static func validate() throws {
        if UIKit.UIImage(named: "barButtonItem:VEI-cc-iz3:image", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'barButtonItem:VEI-cc-iz3:image' is used in storyboard 'TabMenu', but couldn't be loaded.") }
        if UIKit.UIImage(named: "historyTabbar", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'historyTabbar' is used in storyboard 'TabMenu', but couldn't be loaded.") }
        if UIKit.UIImage(named: "newsTabbar", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'newsTabbar' is used in storyboard 'TabMenu', but couldn't be loaded.") }
        if UIKit.UIImage(named: "profileTabbar", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'profileTabbar' is used in storyboard 'TabMenu', but couldn't be loaded.") }
        if UIKit.UIImage(named: "searchTabbar", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'searchTabbar' is used in storyboard 'TabMenu', but couldn't be loaded.") }
        if #available(iOS 11.0, tvOS 11.0, *) {
        }
      }

      fileprivate init() {}
    }
    #endif

    fileprivate init() {}
  }
  #endif

  fileprivate init() {}
}
